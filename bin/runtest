#! /bin/sh
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the files COPYING and Copyright.html.  COPYING can be found at the root
# of the source code distribution tree; Copyright.html can be found at the
# root level of an installed copy of the electronic HDF5 document set and
# is linked from the top-level documents page.  It can also be found at
# http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have
# access to either file, you may request a copy from help@hdfgroup.org.
#

# run the bin snapshot test scripts
# Usage:
#	runtest		run the test for the local host
#	runtest <hostname>	run the test for <hostname>
#	runtest -all		run the test for all predefined hosts
#
# Assumptions in knowing where to find the right scripts to execute.
# 1. assume we are at the top level of the snapshot directory.  So, bin/*
#    is where the script files are.

# local setup
DEBUGMODE=""
test -n "$DEBUGMODE" && echo "******** DEBUGMODE is $DEBUGMODE ************"
WHEREAMI='pwd'
CMD=
BATCHMODE=""
SSH_TIMEOUT=60         # seconds to wait for response to ssh command

# the name of this program
PROGNAME="bin/runtest $DEBUGMODE"

# Setup
HOST_NAME=`hostname | cut -f1 -d.`	# no domain part
TODAY=`date +%m%d%a`
WEEKDAY=`date +%a`
SNAPSHOTNAME=
HDFREPOS=
if [ -f bin/snapshot_params ]; then
   . bin/snapshot_params
fi
SWVER=			# default to current source repo version
SWVERSION=		# default to current source repo version
n_test=0		# Number of tests ran
n_pass=0		# Number of tests passed
n_fail=0		# Number of tests failed
n_skip=0		# Number of tests skipped

# Default to do checkout (only once) and test, no release.
# Will run test only if there is significant differences from previous version.
# If srcdir is not used, don't launched multiple tests
SNAPSHOT="${DEBUGMODE:+echo }bin/snapshot"
SRCDIR="srcdir"
# Default standard Snaptest commands
SNAPCMD="$SRCDIR test clean"
# Default Standard snaptest command options
STANDARD_OPT=""
ENABLE_PARALLEL="--enable-parallel"
CONFIGNAME=$HOST_NAME	# Name used in the SNAPTESTCFG file

# test host default as local host.
TESTHOST=""

#################################
# Function definitions
#################################

# Print messages to stdout
# Use this to show output heading to stdout
PRINT()
{
    echo "$*"
}

# Show seconds since midnight.
# This is used to calculate seconds elapsed
SecOfDay()
{
    set `date '+%H %M %S'`
    t_sec=`expr $1 \* 3600 + $2 \* 60 + $3`
    echo $t_sec
}

# Calculated the elapsed time (in seconds) between the first
# and second time.  If second time is smaller than the first,
# we assume the clock has passed midnight and calculate appropriately.
ElapsedTime()
{
    if [ $2 -lt $1 ]; then
	t_sec=`expr 3600 \* 24 - $1 + $2`
    else
	t_sec=`expr $2 - $1`
    fi
    echo `expr $t_sec / 60`m `expr $t_sec % 60`s
}

# Report errors
# $1--an error message to be printed
REPORT_ERR()
{
    ERRMSG=$1
    # print it with a banner shifted right a bit
    PRINT "	*************************************"
    PRINT "	`date`"
    PRINT "	$ERRMSG"
    PRINT "	*************************************"
    # report it in the FAILED-LOG file too
    PRINT "$ERRMSG" >> $FAILEDLOG
}

# Report errors
# $1--an error message to be printed
REPORT_SYS_ERR()
{
    ERRMSG=$1
    # print it with a banner shifted right a bit
    PRINT "	*************************************"
    PRINT "	`date`"
    PRINT "	$ERRMSG"
    PRINT "	*************************************"
    # report it in the SYSERR-LOG file too
    PRINT "$ERRMSG" >> $SYSERRLOG
}

# Report errors
# $1--an error message to be printed
REPORT_INC_ERR()
{
    ERRMSG=$1
    # print it with a banner shifted right a bit
    PRINT "	*************************************"
    PRINT "	`date`"
    PRINT "	$ERRMSG"
    PRINT "	*************************************"
    # report it in the INCOMPLETE-LOG file too
    PRINT "$ERRMSG" >> $INCOMPLETELOG
}

#
# Report results of the last test done
REPORT_RESULT()
{
    if [ $retcode -eq 0 ]; then
	if [ $skiptest = yes ]; then
	    n_skip=`expr $n_skip + 1`
	    PRINT "SKIPPED ${HOST_NAME}: $TEST_TYPE" | tee -a $SKIPPEDLOG
	else
	    n_pass=`expr $n_pass + 1`
	    PRINT "PASSED ${HOST_NAME}: $TEST_TYPE" | tee -a $PASSEDLOG
	fi
    else
	# test failed.
	n_fail=`expr $n_fail + 1`
	REPORT_ERR "****FAILED ${HOST_NAME}: $TEST_TYPE****"
    fi
}

# Print a blank line
PRINT_BLANK()
{
    PRINT
}

# Print test trailer
PRINT_TEST_TRAILER()
{
    PRINT "*** finished $TEST_TYPE tests for $HOST_NAME ***"
    date; EndTime=`SecOfDay`
    PRINT Total time = `ElapsedTime $StartTime $EndTime`
    PRINT_BLANK
}

# Print trailer summary
PRINT_TRAILER()
{
    PRINT "*** finished tests in $HOST_NAME ***"
    date; TotalEndTime=`SecOfDay`
    PRINT "${HOST_NAME}: Ran $n_test($n_pass/$n_fail/$n_skip) $runtest_type, Grand total test time = " \
          "`ElapsedTime $TotalStartTime $TotalEndTime`" | tee -a $TIMELOG
    PRINT_BLANK
}

# Figure out which remote command to use to reach a host.
# Try ssh first, then rsh since fewer machines support rsh exec.
# $1--hostname to reach.
CHECK_RSH()
{
    # Figure out how to use ping command in this host.
    # Some hosts use "ping host count", some use "ping -c count host".
    # Test "ping -c 3 -w 5" since it has timeout feature.
    # Test "ping -c ..." style before "ping host 3" because some machines
    # that recognize -c treat 'ping localhost 3' as to ping host '3'.
    if [ -z "$PING" ]; then
	if ping -c 3 -w 5 localhost >/dev/null 2>&1; then
	    PING='ping -c 3 -w 5'
	    PINGCOUNT=
	elif ping -c 3 localhost >/dev/null 2>&1; then
	    PING='ping -c 3'
	    PINGCOUNT=
	elif ping localhost 3 >/dev/null 2>&1; then
	    PING=ping
	    PINGCOUNT=3
	else	# don't know how to use ping.
	    PING=no_ping
	    PINGCOUNT=
	fi
    fi
    #
    host=$1
    # Try remote command with host if it responds to ping.
    # Still try it if we don't know how to do ping.
    if [ no_ping = "$PING" ] || $PING $host $PINGCOUNT >/dev/null 2>&1; then
        # Add ConnectTimeout=$SSH_TIMEOUT to avoid ssh hanging on one machine preventing 
        # the daily test script from continuing on to other tests. LRK20131002
	if ssh -o ConnectTimeout=$SSH_TIMEOUT $host -n hostname >/dev/null 2>&1; then
	    RSH="ssh -o ConnectTimeout=$SSH_TIMEOUT"
        #Macs sometimes need more than one connection attempt
        else
            sleep 5
            if ssh -o ConnectTimeout=$SSH_TIMEOUT $host -n hostname >/dev/null 2>&1; then
                        RSH="ssh -o ConnectTimeout=$SSH_TIMEOUT"
            else
                sleep 5
                if ssh -o ConnectTimeout=$SSH_TIMEOUT $host -n hostname >/dev/null 2>&1; then
                    RSH="ssh -o ConnectTimeout=$SSH_TIMEOUT"
	        else
	            PRINT cannot remote command with $host
                    RSH="NoRemoteCommand"
	        fi
            fi
        fi
    else
	RSH="NotReachable"
    fi
}


# Wait for a file for at most number of minutes
# $1--the file
# $2--number of minutes
# WAIT_STATUS set to:
#	-1 if errors encountered
#	0  if file found within time limit
#	1  if file not found within time limit
WAITFOR()
{
    wait_file=$1
    nminutes=$2
    if [ -z "$wait_file" -o "$nminutes" -lt 0 ]
    then
	PRINT "errors in argument of WAITFOR(): wait_file($1) or nminutes($2)"
	WAIT_STATUS=-1
	return
    fi
    while [ ! -f $wait_file ]; do
	if [ $nminutes -gt 0 ]; then
	    PRINT "Wait For $wait_file to appear"
	    sleep 60			#sleep 1 minute
	else
	    WAIT_STATUS=1
	    return
	fi
	nminutes=`expr $nminutes - 1`
    done
    WAIT_STATUS=0
    return
}


# Wait till a file disappears for at most number of minutes.
# Useful to wait till a lock is removed by another process.
# $1--the file
# $2--number of minutes
# WAIT_STATUS set to:
#	-1 if errors encountered
#	0  if file disappears within time limit
#	1  if file has not disappeared within time limit
WAITTILL()
{
    wait_file=$1
    nminutes=$2
    if [ -z "$wait_file" -o "$nminutes" -lt 0 ]
    then
	PRINT "errors in argument of WAITTILL(): wait_file($1) or nminutes($2)"
	WAIT_STATUS=-1
	return
    fi
    while [ -f $wait_file ]; do
	if [ $nminutes -gt 0 ]; then
	    PRINT "Wait till $wait_file has disappeared"
	    sleep 60			#sleep 1 minute
	else
	    WAIT_STATUS=1
	    return
	fi
	nminutes=`expr $nminutes - 1`
    done
    WAIT_STATUS=0
    return
}


# Run one snapshot test
# $*--Types of test being run
RUNSNAPTEST()
{
    EXEC_CMD_ARG=""
    SNAPCMD_OPT="$STANDARD_OPT"		# snapshot test option
    SRCDIRNAME=${HOST_NAME}
    # restore CC, PATH in case they were changed in the last test.
    CC="$CC_SAVED"
    PATH=$PATH_SAVED
    export PATH			# DEC OSF1 needs to export PATH explicitly
    TEST_TYPE=$*
    retcode=0
    skiptest=no
    date
    PRINT "*** starting $TEST_TYPE tests in $HOST_NAME ***"
    PRINT "Uname -a: `uname -a`"

    # Parse the test type and set options accordingly.
    # See comments of SNAPTEST_CONFIG_PARSE().
    while [ $# -gt 0 ]; do
	case $1 in
	    -n32) # want -n32 option
		SRCDIRNAME=${SRCDIRNAME}-n32
		CC="cc -n32"
		export CC
		;;
	    -64) # want -64 option
		SRCDIRNAME=${SRCDIRNAME}-64
		CC="cc -64"
		export CC
		;;
	    parallel) # want parallel test
		SNAPCMD_OPT="$SNAPCMD_OPT $ENABLE_PARALLEL"
		SRCDIRNAME=${SRCDIRNAME}-pp
		;;
	    standard) # standard test
		;;
	    --*)
		# option for configure
		SNAPCMD_OPT="$SNAPCMD_OPT $1"
		;;
	    op-configure)
		# option for configure
		SNAPCMD_OPT="$SNAPCMD_OPT $1 $2"
		shift
		;;
	    op-snapshot)
		# option for snapshot
		shift
		SNAPCMD_OPT="$SNAPCMD_OPT $1"
		;;
	    setenv)
		# pass them along to snapshot set environment variable
		shift
		SNAPCMD_OPT="$SNAPCMD_OPT setenv $1 $2"
		shift
		;;
	    setenvN)
		# set environment variable with $1 values
		# e.g., setenvN 3 x a b c is same as setenv x="a b c".
		# pass them along to snapshot set environment variable
		shift
		envN=$1
		shift
		envname=$1
		SNAPCMD_OPT="$SNAPCMD_OPT setenvN $envN $envname"
		envalue=
		while test $envN -gt 0; do
		    shift
		    envalue="$envalue $1"
		    envN=`expr $envN - 1`
		done
		SNAPCMD_OPT="$SNAPCMD_OPT $envalue"
		;;
	    skip)
		# skip this test
		skiptest=yes
		;;
	    srcdirname)
		# Use this before using parallel and -n32 since this overrides
		# the others.
		shift
		SRCDIRNAME=${SRCDIRNAME}$1
		;;
	    deploy)
		# deploy the built binary.
		shift
		SNAPCMD_OPT="$SNAPCMD_OPT deploy $1"
		;;
	    deploydir)
		# default directory for deployment.
		shift
		SNAPCMD_OPT="$SNAPCMD_OPT deploydir $1"
		;;
            exttest)
                shift
                if [ $# -lt 1 ]; then
                    echo "exttest script name missing"
                    errcode=1
                    cmd="help"
                    break
                fi
                cmd=""
                #EXTTEST="$1"
                SNAPCMD_OPT="$SNAPCMD_OPT exttest $1"
                ;;
            exec)
                shift
                if [ $# -lt 1 ]; then
                    echo "exec command name missing"
                    errcode=1
                    cmd="help"
                    break
                fi
                cmd=""
		EXEC_CMD_ARG="exec $*"
		# exit the parser while loop since all arguments have been consummed.
		break
                ;;
	    *) # unknown test
		PRINT "$0: unknown type of test ($1)"
		echo "****SYSTEM ERROR $HOST_NAME: unknown type of test ($1)" >> $SYSERRLOG
                sys_err=1
		retcode=1
		;;
	esac
	shift
    done
    # echo "After Parser: SNAPCMD_OPT=$SNAPCMD_OPT EXEC_CMD_ARG=$EXEC_CMD_ARG"

    if [ $retcode -ne 0 -o $skiptest = yes ]; then
	errcode=$retcode 
	return $retcode
    fi

    # Track down the zlib software
    ans=`$SNAPYARD/bin/locate_sw zlib`
    if [ $? = 0 ]; then
	Z_INC=`echo $ans | cut -f1 -d,`
	Z_LIB=`echo $ans | cut -f2 -d,`
	SNAPCMD_OPT="$SNAPCMD_OPT zlib $Z_INC,$Z_LIB"
    else
	# cannot locate zlib software.
	# continue the test, maybe configure can find it.
	:
    fi

    if [ -n "${SRCDIRNAME}" ]; then
        if [ -n "$BATCHMODE" ]; then
            SRCDIRNAME="$SRCDIRNAME-$n_test"
        else
            case "$SRCDIRNAME" in
            "")
                 SRCDIRNAME=$HOSTNAME
                 ;;
            -*)
                 SRCDIRNAME=$1
                 ;;
            esac
        fi
        TESTDIR=${BASEDIR}/TestDir/${SRCDIRNAME}
        test -d ${TESTDIR} || mkdir ${TESTDIR}
        if [ ! -d ${TESTDIR} ]; then
            REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: Could not create ${TESTDIR}"
            sys_err=1
            return
        fi
	SNAPCMD_OPT="$SNAPCMD_OPT srcdirname ${SRCDIRNAME}"
        # echo "SRCDIRNAME is $SRCDIRNAME"
    fi

    # Setup log file name to save test output
    THIS_MINUTE=`date +%H%M`
    LOGFILE=${LOGBASENAME}/${SRCDIRNAME}_${TODAY}_${THIS_MINUTE}
    PRINT "Running snapshot with output saved in"
    PRINT "   $LOGFILE"
    (date; PRINT Hostname=$HOST_NAME) >> $LOGFILE

    # echo "SNAPCMD is $SNAPCMD"
    # echo "SNAPCMD_OPT is $SNAPCMD_OPT"
    if [ -n "$BATCHMODE" ]; then
        (
        cd $SNAPYARD
        perl bin/batch-$CONFIGNAME-runsnaptest.pl $SNAPSHOTNAME $SRCDIRNAME $LOGFILE $SNAPSHOT $SNAPCMD $SNAPCMD_OPT $EXEC_CMD_ARG
        ) >> $LOGFILE 2>&1 
    else
        (
        cd $SNAPYARD
        # echo "Running $SNAPSHOT $SNAPCMD $SNAPCMD_OPT"
        $SNAPSHOT $SNAPCMD $SNAPCMD_OPT $EXEC_CMD_ARG
        ) >> $LOGFILE 2>&1
        retcode=$?
        [ $retcode -ne 0 ] && errcode=$retcode
        date >> $LOGFILE
        if [ $retcode -ne 0 ]; then
            # Dump the first 10 lines and the last 30 lines of the LOGFILE.
            ( ntail=50
	        echo =========================
	        echo "Dumping logfile of ${HOST_NAME}: $TEST_TYPE"
	        echo "Last $ntail lines of $LOGFILE"
	        echo =========================
	        tail -$ntail $LOGFILE
                echo =========================
                echo Dumping done
                echo =========================
	        echo ""
	    ) >> $FAILEDDETAIL
        fi
    fi
}

TIMELIMIT_PARSE()
{
    # Function returns timeparam for timekeeper via standard out -
    # any debug statements should be 'echo "Debug string" >&2' or timekeeper
    # will declare timeparam to be non-numeric and ignore it.
    while read x y ; do
        # Scan for entry for this weekday.
        xd=`echo $x | cut -f1 -d/`
        if [ "$xd" = ${WEEKDAY} ]; then
            # strip away the weekday/ part.
            timeparam=`echo $x | cut -f2 -d/`
            break
        fi
        case "$x" in
           '' | '#'*)
                # blank or comment lines.  Continue.
                ;;
            ???/*)
                # Ignore any entry not of this weekday.
                ;;
            *)
                timeparam="$x"
                ;;
        esac
    done
    echo $timeparam
    return
}

# configuration parsing.
# Taking configuration from input.
# This should be invoke with configure file as stdin.
# Syntax of the configure file:
#    All lines started with the # are comment lines and are ignored.
#    Blank lines are ignored too.
#    Each config line starts with a "Scope" followed by test types.
#
# Scope can be:
#    standard ...          # what the standard test types are.
#    <host>: <test>        Do <test> for <host> 
#    all: <test>           Do <test> for all hosts. 
#    <weekday>/...         Use this scope if the <weekday> matches.
#                          <weekday> can be {Mon,Tue,Wed,Thu,Fri,Sat,Sun}
#    If no <host>: input for a <host>, the standard test is used.
#
# Test types:
#    standard		tests defined in standard scope.
#    -n32		-n32 mode.  Apply to 64/32 bit OS such as IRIX64.
#    parallel		parallel mode.
#    op-configure <option>	configure option
#    op-snapshot <option>	snapshot option
#    --*		configure option
#    setenv <name> <value>	set environment variable <name> to <value>
#                       Pass along to snapshot
#    setenvN <N> <name> <value> ...
#		        set environment variable with <N> values
#		        e.g., setenvN 3 x a b c is same as setenv x="a b c".
#                       Pass along to snapshot.
#    skip		skip this test
#    srcdirname <name>	use <name> as the build-directory.
#    deploy <name>	deploy the built binary at directory <name>.
#    deploydir <name>   use <name> as the default directory for deployment.
SNAPTEST_CONFIG_PARSE()
{
    while read x y ; do
	# Scan for entry for this weekday.
	xd=`echo $x | cut -f1 -d/`
	if [ "$xd" = ${WEEKDAY} ]; then
	    # strip away the weekday/ part.
	    x=`echo $x | cut -f2 -d/`
	fi
	case "$x" in
	    '' | '#'*)
		# blank or comment lines.  Continue.
	    	;;
	    ???/*)
		# Ignore any entry not of this weekday.
		;;
	    standard)
		#standard configuration
		STANDARD_OPT="$y"
		;;
	    all: | ${CONFIGNAME}:)
		# types of test for all hosts or this host
		if [ -n "$TEST_TYPES" ]; then
		    TEST_TYPES="$TEST_TYPES ; $y"
		else
		    TEST_TYPES="$y"
		fi
		;;
	    *:)	# ignore types of test for other hosts
		;;
	    *)	# unknown configuration option
		PRINT $x $y
		PRINT "***Unknown configuration option. Ignored.***"
		;;
	esac
    done
}

# Snap Test configuration parsing.
# If TEST_TYPES is not set, set it to do the "standard" test.
SNAPTEST_CONFIG()
{
    TEST_TYPES=
    STANDARD_OPT=
    if [ -f $SNAPTESTCFG ]; then
	SNAPTEST_CONFIG_PARSE < $SNAPTESTCFG
    fi
    TEST_TYPES=${TEST_TYPES:-'standard'}
}


# Show usage page
USAGE()
{
cat <<EOF
Usage: runtest [-h] [-debug] [-r<version>] [-all] [-norepo] [-nodiff] [<host> ...]
    -h
	print this help page
    -debug
	turn on debug mode
    -r<version>
	do runtest for <version>
    -all
	launch tests for all pre-defined testing hosts
    -norepo
	do not do source checkout or update commands
    -nodiff
	do not do diff commands
    -setup
        setup the directory structure for snapshot test
    -configname <name>
	use <name> as hostname in the parsing of the snaptest configure file
    <host>
	launch tests for <host>
    
-all and <host> are contradictory and whichever is specified last, is
the one to take effect.  If neither are given, do the test for the
local host.
EOF
}


# Verify if directory ($1) exists.  If not, create it.
CHECK_DIR()
{
   dir=$1
   if test ! -e $1; then
      echo mkdir $1
      mkdir $1
      errcode=$?
   elif test ! -d $1; then
      echo $1 is not a directory
      errcode=1
   fi
}


#################################
# Main
#################################
#################################
# Set up global variables
#################################
retcode=0			# error code of individula task
errcode=0			# error code of the whole test
skiptest=no			# if test is skipped
CC_SAVED="$CC"			# CC & PATH maybe changed within a test.
PATH_SAVED=$PATH		# These save the original values.
timelimit=300			# time limit (minutes) for the timekeeper

#################################
# Parse options
#################################
while [ $# -gt 0 ]; do
    case "$1" in
	-h) # help--show usage
	    USAGE
	    exit 0
	    ;;
	-debug*)
	    # set debug mode
	    DEBUGMODE="$1"
	    SNAPSHOT="echo bin/snapshot"
            # We should be able to run in debug mode no matter what time 
            # of day it is
            SHOULD_FINISH="23:59"
            SHOULD_FINISH_WKND="23:59"
	    PROGNAME="$PROGNAME $DEBUGMODE"
	    PRINT "******** DEBUGMODE is $DEBUGMODE ************"
	    ;;
	-r*)
	    # version string
	    SWVER="$1"
	    ;;
	-all)
            # echo "Testing all hosts."
	    # Test all hosts.
	    TESTHOST=-all
	    ;;
	-norepo)
	    # do not do source update commands.
	    NOREPO=norepo
	    ;;
	-nodiff)
	    # do not do diff commands.
	    NODIFF=nodiff
	    ;;
	-configname)
            # echo "Using configname option for $1"
	    # use <name> as hostname in the parsing of the snaptest configure file.
	    shift
	    CONFIGNAME=$1
	    ;;
	-setup)
	    # setup the directory structure for snapshot test.
	    CMD=setup
	    ;;
        -ftp)
            shift
            if [ $# -lt 1 ]; then
                echo "ftp <URL> missing"
                errcode=1
                cmd="help"
                break
            fi
            FTP="ftp"
            FTPURL="$1"
            echo "Set FTP flag and FTPURL to $FTP and $FTPURL"
            ;;
        -exttest)
            echo "Exttest option configured for $1"
            shift
            if [ $# -lt 1 ]; then
                echo "exttest script name missing"
                errcode=1
                cmd="help"
                break
            fi
            cmd=""
            EXTTEST="$1"
            ;;
	-*) # Unknown option
	    PRINT "Unknown option ($1)"
            REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: Unknown option ($1)"
	    USAGE
	    exit 1
	    ;;
	*)
	    TESTHOST=$*
	    break
	    ;;
    esac
    shift
done

# setup SWVER if not set yet
if [ -z "$SWVER" -a -f bin/snapshot_version ]
then
    . bin/snapshot_version
fi

# echo $SWVER
# echo $SWVERSION

if [ -n "$SWVER" ]
then
    SWVERSION=${HDFREPOS}_`echo $SWVER | sed -e s/-r// -e s/\\\./_/g`
    PROGNAME="$PROGNAME $SWVER"
elif [ -z "$SWVERSION" ]; then
    SWVERSION=${HDFREPOS}
fi

#################################
# Setup snapshot test directories
#################################
BASEDIR=${HOME}/snapshots-${SNAPSHOTNAME}
# initial processing of setup option if requested
if test x-$CMD = x-setup; then
    CHECK_DIR $BASEDIR
    test $errcode -ne 0 && exit 1
elif [ ! -d ${BASEDIR} ]; then
    echo "BASEDIR ($BASEDIR) does not exist"
    REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: BASEDIR ($BASEDIR) does not exist"
    exit 1
fi
# Show the real physical path rather than the symbolic path
SNAPYARD=`cd $BASEDIR && /bin/pwd`
# Log file basename
LOGDIR=${SNAPYARD}/log
LOGBASENAME=${LOGDIR}
PASSEDLOG=${LOGDIR}/PASSED_LOG_${TODAY}
FAILEDLOG=${LOGDIR}/FAILED_LOG_${TODAY}
FAILEDDETAIL=${LOGDIR}/FAILED_DETAIL_${TODAY}
SKIPPEDLOG=${LOGDIR}/SKIPPED_LOG_${TODAY}
INCOMPLETELOG=${LOGDIR}/INCOMPLETE_LOG_${TODAY}
SYSERRLOG=${LOGDIR}/SYSERR_LOG_${TODAY}
NODIFFLOG=${LOGDIR}/NODIFF_LOG_${TODAY}
TIMELOG=${LOGDIR}/TIME_LOG_${TODAY}
TIMEKEEPERLOG=${LOGDIR}/TIMEKEEPER_LOG_${TODAY}
REPORTED=${LOGDIR}/REPORTED_${TODAY}
REPOLOG=${LOGDIR}/REPO_LOG_${TODAY}
REPOLOG_LOCK=${LOGDIR}/REPO_LOG_LOCK_${TODAY}
DIFFLOG=${LOGDIR}/DIFF_LOG_${TODAY}
COPYRIGHT_ERR=${LOGDIR}/COPYRIGHT_ERR_${TODAY}
# Snap Test hosts and Configuration files
ALLHOSTSFILE=${SNAPYARD}/allhostfile
SNAPTESTCFG=${SNAPYARD}/snaptest.cfg
TIMELIMIT=${SNAPYARD}/timelimit
TMPFILE="${LOGDIR}/#runtest.${TODAY}.$$"

# more processing of setup option if requested
if test x-$CMD = x-setup; then
    CHECK_DIR $LOGDIR
    test $errcode -ne 0 && exit 1
    CHECK_DIR $LOGDIR/OLD
    test $errcode -ne 0 && exit 1
    CHECK_DIR $SNAPYARD/TestDir
    test $errcode -ne 0 && exit 1
    # create empty test hosts or configure files if non-existing
    for f in $ALLHOSTSFILE $SNAPTESTCFG; do
	if test ! -f $f; then
	    echo Creating $f
	    touch $f
	fi
    done
    # create or update the current source.
    echo "Running snapshot checkout to update current source"
    $SNAPSHOT checkout 
    # setup completed.  Exit.
    exit 0
fi

#################################
# Show some host status numbers
#################################
# df sometimes hangs due to file system problems.  Invoke it as background
# process and give it 10 seconds to finish.  If it hangs, just continue.
uptime
df &
sleep 10

#################################
# Setup test host(s)
#################################
if [ "$TESTHOST" = -all ]; then
    if [ -f $ALLHOSTSFILE ]; then
	TESTHOST=`sed -e '/^#/d;/^ *$/d' $ALLHOSTSFILE`
    else
	PRINT "could not access the all-hosts-file ($ALLHOSTSFILE)"
	USAGE
	exit 1
    fi
fi


#################################
# Setup to print a trailer summary when exiting not via
# the normal end of the script.
#################################
trap PRINT_TRAILER 0 1 2 9 15

#
TotalStartTime=`SecOfDay`

# Process the configuration
SNAPTEST_CONFIG
PRINT STANDARD_OPT=$STANDARD_OPT
PRINT TEST_TYPES=$TEST_TYPES
PRINT_BLANK

# echo "FTP flag is $FTP"
if [ -n "$FTP" ]; then
    PRINT "Running FTP download with output saved in"
    PRINT "   $REPOLOG"
    # Set REPO lock first
    touch $REPOLOG_LOCK
    $SNAPSHOT ftp "$FTPURL" >> $REPOLOG 2>&1
    # Save error code and remove the lock
    errcode=$?
    rm -f $REPOLOG_LOCK
    if [ $errcode -ne 0 ]; then
	# test failed.
	REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: FTP download****"
	exit $errcode
    fi
    echo "Ran $SNAPSHOT ftp $FTPURL in line 870"
    NOREPO=nrepo
fi
# Do a checkout if one has not been done today.
# Then check MANIFEST file and copyrights noitces.
if [ -z "$NOREPO" ]; then
    PRINT "Running source repository checkout with output saved in"
    PRINT "   $REPOLOG"
    # Set REPO lock first
    touch $REPOLOG_LOCK
    ($SNAPSHOT checkout ) >> $REPOLOG 2>&1
    # Save error code and remove the lock
    errcode=$?
    rm -f $REPOLOG_LOCK
    if [ $errcode -ne 0 ]; then
	# test failed.
	REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: Source repository checkout****"
	exit $errcode
    fi
    # ===================
    # Check MANIFEST file
    # ===================
    PRINT Checking MANIFEST file ...
    errcode=0
    POS4=`perl -e "print index(\"$HDFREPOS}\", 'hdf4')"`
    POS5=`perl -e "print index(\"${HDFREPOS}\", 'hdf4')"`
    if [ "${HDFREPOS}" =  "hdf4" ] || [ "${HDFREPOS}" = "hdf5" ]; then
        (cd $SNAPYARD/current; svn info
        errcode=$?
        if [ $errcode -eq 0 ]; then
            ./bin/chkmanifest
        else
            echo "Testing source from a tarfile. Cannot check MANIFEST without svn."
        fi) > $TMPFILE 2>&1
        errcode=$?
    fi
    if [ $errcode -eq 0 ]; then
	# test passed.
	cat $TMPFILE
    else
	# test failed.
	REPORT_ERR "****FAILED ${HOST_NAME}: MANIFEST check****"
        (   echo =========================
	    echo "MANIFEST checking failed output"
	    echo =========================
	    cat $TMPFILE
            echo =========================
	    echo "MANIFEST checking failed output done"
            echo =========================
	    echo ""
	) >> $FAILEDDETAIL
    fi
    rm $TMPFILE
    PRINT_BLANK
    # No copyright checking until what need copyright is decided. 2006/4/7.
    if false; then
    # ======================
    # Check Copyright notice
    # ======================
    PRINT Checking Copyrights notices ...
    if (cd $SNAPYARD/current; ../bin/chkcopyright) > $TMPFILE 2>&1 ; then
	echo Passed.
    else
	# Save the output and report some of it.
	# Do not report it as failed for runtest yet.
	# Send a separate report mail via hardcoding.
	# Need fixes/cleanup later.
	echo "Failed. See detail in another report mail"
	cp $TMPFILE $COPYRIGHT_ERR
	nheadlines=300
	ntaillines=5		# Number of lines in report summary.
	(
	    echo =========================
	    echo "Copyright checking failed. Showing first $nheadlines lines of output."
	    echo "Complete output is in file $COPYRIGHT_ERR"
	    echo =========================
	    nreportlines=`wc -l < $COPYRIGHT_ERR`
	    if [ $nreportlines -le `expr $nheadlines + $ntaillines` ]; then
		# Just print the whole file.
		cat $COPYRIGHT_ERR
	    else
		# Show the first $nheadlines plus report summary
		head -$nheadlines $COPYRIGHT_ERR
		echo ...
		tail -$ntaillines $COPYRIGHT_ERR
	    fi 
	)  | Mail -s "${SWVERSION} Copyrights check Failed" hdf5lib
    fi
    rm $TMPFILE
    PRINT_BLANK
    fi
else
    # make sure the source code update, if done by another host, has completed.
    # First wait for the presence of $REPOLOG which signals some host has
    # started the source update.  Then wait for the absense of $REPOLOG_LOCK
    # which signals the host has completed the source code update.

    WAITFOR $REPOLOG 90
    if [ $WAIT_STATUS -ne 0 ]; then
	errcode=$WAIT_STATUS
	REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: Time expired waiting for source update to start****"
	exit $errcode
    fi
    WAITTILL $REPOLOG_LOCK 10
    if [ $WAIT_STATUS -ne 0 ]; then
	errcode=$WAIT_STATUS
	REPORT_SYS_ERR "****SYSTEM ERROR ${HOST_NAME}: Time expired waiting for source update to finish****"
	exit $errcode
    fi
fi

# run a snapshot diff to see if any significant differences between
# the current and previous versions
#NODIFF=""
if [ -z "$NODIFF" ]; then
#    (cd $SNAPYARD/current;svn info | grep "Last Changed" >> $REPORTED 2>&1)
#    $SNAPYARD/$SNAPSHOT diff >> $DIFFLOG 2>&1
    $SNAPSHOT diff >> $DIFFLOG 2>&1
    errcode=$?
    # check the errcode only if NOT in DEBUG MODE
    if [ -z "$DEBUGMODE" -a $errcode -eq 0 ]; then
	# no need to run test
	PRINT "NO TEST: no significant differences between current and previous versions" |
	    tee -a $NODIFFLOG
	exit 0
    fi
fi

# we can use the version of script in SNAPYARD now.
# Don't do the diff or source code update any more.
PROGNAME="$SNAPYARD/$PROGNAME -nodiff -norepo"

# Decide to do test for the local host or for remote hosts
if [ -n "$TESTHOST" -a $HOST_NAME != "$TESTHOST" ]; then
    date
    PRINT "*** launching tests from $HOST_NAME ***"
    PRINT_BLANK
    PRINT "TESTHOST is $TESTHOST"
    TEST_TYPE="launching"
    cd ${SNAPYARD}/log
    # Fork off timekeeper if concurrent tests will be used.
    if [ -n "$SRCDIR" ]; then
        timelimit=`TIMELIMIT_PARSE < $TIMELIMIT`
	($SNAPYARD/bin/timekeeper $timelimit > $TIMEKEEPERLOG 2>&1 &)
	PRINT "    Fork off timekeeper $timelimit"
    fi
    runtest_type="hosts"
    for h in $TESTHOST; do
	# Must do CONFIGNAME before $h got changed by the second cut.
	# cut returns the whole string if there is no / in the string
	# at all.  But that works okay for the CONFIGNAME too.
	CONFIGNAME=`echo $h | cut -f2 -d/`
	h=`echo $h | cut -f1 -d/`
	n_test=`expr $n_test + 1`
	TMP_OUTPUT="#${h}_${CONFIGNAME}.out"
	(PRINT "=============="
	 PRINT "Testing $h"
	 PRINT "==============") > $TMP_OUTPUT
	CHECK_RSH $h
	# run the remote shell command with output to $TMP_OUTPUT
	case "$RSH" in
	    "ssh -o ConnectTimeout=$SSH_TIMEOUT")
		CMD="$RSH $h -n cd $BASEDIR;$PROGNAME -configname $CONFIGNAME"
		PRINT $CMD

		# launch concurrent tests only if srcdir is used
		if [ -n "$SRCDIR" ]; then
		    $CMD || echo "****SYSTEM ERROR ${h}: Abnormal exit from runtest ****" && PRINT_BLANK &
		    echo $! > PID.${h}_${CONFIGNAME}
		else
		    $CMD || echo "****SYSTEM ERROR ${h}: Abnormal exit from runtest ****" && PRINT_BLANK
		fi
		;;
	    NoRemoteCommand)
		PRINT $h does not accept Remote Command "(`date`)"
                REPORT_SYS_ERR "****SYSTEM ERROR: ${h} does not accept Remote Command (`date`)" 
		;;
	    NotReachable)
		PRINT $h is not reachable  "(`date`)"
                REPORT_SYS_ERR "****SYSTEM ERROR: ${h} is not reachable (`date`)"

		;;
	    *)
		PRINT "CHECK_RSH for $h returned unknown result ($RSH)"
                REPORT_SYS_ERR "****SYSTEM ERROR: CHECK_RSH for $h returned unknown result ($RSH)"
		;;
	esac >> $TMP_OUTPUT 2>&1
    done
    # wait for all launched tests to finish, then cat them back out.
    wait
    # Pause a moment in case the timekeeper is terminating processes.
    sleep 30
    for h in $TESTHOST; do
	CONFIGNAME=`echo $h | cut -f2 -d/`
	h=`echo $h | cut -f1 -d/`
	TMP_OUTPUT="#${h}_${CONFIGNAME}.out"
	cat $TMP_OUTPUT
	# Verify test script did complete by checking the last lines
	if (tail -3 $TMP_OUTPUT | grep -s 'Abnormal' > /dev/null 2>&1) ; then
            echo "Runtest did not exit normally." >> $FAILEDDETAIL
           (REPORT_SYS_ERR "****SYSTEM ERROR ${h}: runtest command failed ****" &&
                PRINT_BLANK)
        else          
            (tail -3 $TMP_OUTPUT | grep -s 'Grand total' > /dev/null 2>&1) ||
	    (REPORT_INC_ERR "****INCOMPLETE ${h}: snaptest did not complete****" &&
		PRINT_BLANK)
        fi
	rm -f $TMP_OUTPUT PID.${h}_${CONFIGNAME}
    done
    exit 0
fi

# run the test(s)
# Note that first field is cut without -s but all subsequent cut
# must use -s.  If -s is not used at all, a $TEST_TYPES that has
# no ';' (only 1 test), will pass through intact in all cut. That
# results in infinite looping.
# If -s is used with the first field, it will suppress completely
# a $TYPE_TYPES that has no ';' (only 1 tst ).  That results in no
# test at all.
# Note that n_test must start as 1.
#
cd $SNAPYARD
if [ "${DELAY}" = "${HOST_NAME}" ];then
   echo "Delay running tests 2 hours for performance tests."
   sleep 7200
fi
PWD=`pwd` 
#echo "FTP flag is $FTP"
if [ -n "$FTP" ]; then
    $SNAPSHOT ftp $FTPURL
    # echo "Ran $SNAPSHOT ftp $FTPURL in line 1087"
#else
#    $SNAPSHOT checkout
#    echo "Ran $SNAPSHOT checkout"
fi 
n_test=1
runtest_type="tests"

# The test schedule is different on Saturday and Sunday. 
if [ "${WEEKDAY}" = "Sat" -o "${WEEKDAY}" = "Sun" ]; then
    SHOULD_FINISH=${SHOULD_FINISH_WKND}
fi
if [ -n "$SHOULD_FINISH" ]; then
    set `echo $SHOULD_FINISH | awk -F: ' {print $1 " " $2 " 00"} '`
    deadline=`expr $1 \* 3600 + $2 \* 60 `
else
    deadline=0
fi

TEST="`echo $TEST_TYPES | cut -f$n_test -d';'`"
StartTime=`SecOfDay`
# Run tests while:
#    Current time is before $SHOULD_FINISH
#    It's still the same day as it was when this script started running.
#    Current time + the duration of the last test < $SHOULD_FINISH. 
while [ -n "$TEST" ]; do
    # echo "Running $TEST"
    sys_err=0
        EndTime=`SecOfDay`
        duration=`expr $EndTime - $StartTime`
        projected_finish=`expr $EndTime + $duration`
        StartTime=$EndTime
        DOW=`date +%a`
        if [ "$deadline" -gt 0 -a "$deadline" -lt "$projected_finish" ] \
		 || [ "${WEEKDAY}" != "${DOW}" ]; then
            echo "No more time to run tests:  skipping remaining tests:"
            while [ -n "$TEST" ]; do
                PRINT "SKIPPED ${HOST_NAME}: $TEST" | tee -a $SKIPPEDLOG
                n_skip=`expr $n_skip + 1`
                n_test=`expr $n_test + 1`
                TEST="`echo $TEST_TYPES | cut -f$n_test -s -d';'`"
            done
            break
        fi
        
    RUNSNAPTEST $TEST 
    if [ -n "$BATCHMODE" ]; then
        if [ $skiptest = yes ]; then
            REPORT_RESULT
            PRINT_TEST_TRAILER
        else
            PRINT "SUBMITTED batch job ${HOST_NAME}: $TEST_TYPE":
            date
        fi
        n_test=`expr $n_test + 1`
        TEST="`echo $TEST_TYPES | cut -f$n_test -s -d';'`"
    else
        if [ $sys_err = 0 ]; then
            REPORT_RESULT
        fi
        PRINT_TEST_TRAILER
        n_test=`expr $n_test + 1`
        TEST="`echo $TEST_TYPES | cut -f$n_test -s -d';'`"
    fi
done

# dec n_test to show the actual number of tests ran.
n_test=`expr $n_test - 1`

if [ -n "$BATCHMODE" ]; then
   cd $SNAPYARD
   perl bin/await_results.pl $SNAPYARD $SNAPSHOTNAME `expr $n_test - $n_skip`

   OUTPUTFILES=`ls log/$HOST_NAME-*`
   for file in $OUTPUTFILES; do
      retcode=1
      TEST_TYPE=`head $file | grep "bin/snapshot"`
#      if ! (tail -3 $file | grep -s 'Exit bin/snapshot with status=0' > /dev/null 2>&1) || (grep "FAILED" $file); then
#         retcode=1
      if (tail -3 $file | grep -s 'Exit bin/snapshot with status=0' > /dev/null 2>&1); then
         if (grep "FAILED" $file); then
            retcode=1
         else
            retcode=0
         fi
      fi

      if [ "$retcode" -eq 1 ]; then      
         # Dump the first 10 lines and the last 50 lines of the LOGFILE.
         ( ntail=50
            echo =========================
            echo "Dumping logfile ${file}: $TEST_TYPE"
            echo "Last $ntail lines of $file"
            echo =========================
            tail -$ntail $file
            echo =========================
            echo Dumping done
            echo =========================
            echo ""
         ) >> $FAILEDDETAIL
      fi
      [ $retcode -ne 0 ] && errcode=$retcode
      REPORT_RESULT
      PRINT_TEST_TRAILER
   done
fi

PRINT_TRAILER

# disable trailer summary printing since all trailers have been
# printed and we are exiting normally.
trap 0
exit $errcode
