#!/usr/bin/perl -w
# This script creates a shell script in the directory from which it is run.

use strict;
use Cwd;

my $MPIRUN_COMMAND = "";
my $PROGRAM = shift;
my $CALLING_DIR = $ENV{'PWD'};

my $OUTPUT_BEGIN = <<'END_OUTPUT_BEGIN';
#!/bin/tcsh
#  Sample Batch Script for a MVAPICH-Intel job
#
# $HOME/.soft contains:
#
#  +mvapich2-0.9.8p2patched-intel-ofed-1.2
#  @teragrid-basic
#  @globus-4.0
#  @teragrid-dev
#
# $HOME/.mpd.conf contains:
#
#  MPD_SECRETWORD=XXXXXXX     # random alphanumeric chars
#                             # (MUST contain at least one alphabetic char)
#
# (make sure the file .mpd.conf has permissions 700)
#
#  Submit this script using the command: qsub <script_name>
#
#  Use the "qstat" command to check the status of a job.
#
#
# The following are embedded QSUB options. The syntax is #PBS (the # does
# _not_  denote that the lines are commented out so do not remove).
#
# walltime : maximum wall clock time (hh:mm:ss)
#PBS -l walltime=00:10:00
#
# nodes: number of 8-core nodes
#   ppn: how many cores per node to use (1 through 8)
#       (you are always charged for the entire node)
#PBS -l nodes=3:ppn=1
#
# export all my environment variables to the job
#PBS -V
#
# job name (default = name of script file)
#PBS -N hdftpar
#
#
# filename for standard output (default = <job_name>.o<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
###PBS -o testjob.out
#
# filename for standard error (default = <job_name>.e<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
###PBS -e testjob.err
#
# End of embedded QSUB options
#
# set echo               # echo commands before execution; use for debugging
#

#cd $SCR                # change to job scratch directory, 
                       # use cdjob <jobid> to go to this directory once
                       # the job has started
END_OUTPUT_BEGIN

my $OUTPUT_MIDDLE = <<'END_OUTPUT_MIDDLE';
# get executable and input files from mass storage
#msscmd cd dir1, get a.out, mget *.input

# mss doesn't keep executable bit set, so need to set it on program
#chmod +x a.out

mvapich2-start-mpd
setenv NP `wc -l ${PBS_NODEFILE} | cut -d'/' -f1`

setenv MV2_SRQ_SIZE 4000
#mpirun -np ${NP} a.out
END_OUTPUT_MIDDLE

if ( $#ARGV < 0 ) { 
   $MPIRUN_COMMAND = "mpirun -np \${NP} $PROGRAM";
} else {
   $MPIRUN_COMMAND = "mpirun -np \${NP} $PROGRAM @ARGV";
}


my $OUTPUT_END = <<'END_OUTPUT_END';
# The mpirun syntax above will assign ranks to nodes in round-robin fashion.
# To get ranks *packed* into nodes, use this syntax:
#
#  mpirun  -machinefile ${PBS_NODEFILE} -np ${NP} a.out

mpdallexit

# save output files back to mass storage
#msscmd cd dir1, mput *.output 
END_OUTPUT_END


my $currentdir = Cwd::realpath();
my $OUTPUT = $OUTPUT_BEGIN."cd $CALLING_DIR\n".$OUTPUT_MIDDLE.$MPIRUN_COMMAND."\n".$OUTPUT_END;

my $out;
my $outfile = "mvapich-run";
open $out, '>', $outfile;

print $out $OUTPUT;
close $out;

my $cmd = `chmod 775 $PROGRAM`;
#$cmd = `dos2unix $PROGRAM`;
$cmd = `qsub $outfile`; 
#print $cmd;
my $status = `qstat -a | grep hdftest | grep hdftpar`;
while ("$status") {
   sleep(15);
   #print "Waiting for job in parallel queue.\n";
   $status = `qstat -a | grep hdftest | grep hdftpar`;
} 
my @dir = glob 'hdftpar.e*';
foreach my $filename(@dir) {
   if (-f "$currentdir/$filename") {
      if (-s "$currentdir/$filename") {
         #print "Errors!\n";
         $cmd = `cat hdftpar.e*`;
         $cmd = `cat hdftpar.o*`;
          
      } else {
         $cmd = `cat hdftpar.o*`;
      }
   }
}


print "finished.\n";

