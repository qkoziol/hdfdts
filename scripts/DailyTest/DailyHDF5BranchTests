#! /bin/sh
# (Use -e to abort at any unexpected error.)
# Submit daily tests of HDF5 base software
# Usauge: DailyHDFTests [-r<version>]
# Example: DailyHDFTests	# test the CVS current version
#	   DailyHDFTests -r1.2	# test version 1.2
#	   DailyHDFTests -r1.4	# test version 1.4

# general setup
PROGRAMNAME=`basename $0`
DEBUGMODE=""		# change to -debug for debug mode
AUTOGEN=""

# Setup
HOSTNAME=`hostname | cut -f1 -d.`       # no domain part
TODAY=`date +%m%d%a`
SW=HDF5-BRANCHTEST1			# Name of Software.
sw=hdf5-branchtest1		# Name of Software in lower cases.
SWVER=			# Software version, default to current CVS version.
SWVERSTR=		# Software version string.
TITLE="${SW} Tests on $TODAY"
errcode=0		# error code so far

TOWHOM_PASSED="lrknox@hdfgroup.org koziol@hdfgroup.org"
TOWHOM_FAILED="lrknox@hdfgroup.org koziol@hdfgroup.org koziol@hdfgroup.org"

DEFAULTBRANCHNAME=""
# get default branch name for testing with tarball.
if [ -f bin/snapshot_params ]; then
    . bin/snapshot_params
fi


# Parse command options
while [ $# -gt 0 ]; do
    case "$1" in
	-r*)
	    SWVER="$1"
	    SWVERSTR=_`echo $SWVER | sed -e s/-r// -e s/\\\./_/g`
	    ;;
	-debug*)
	    DEBUGMODE="$1"
	    ;;
        -SW)
            shift
            SW="$1"
            ;;
        -sw)
            shift
            sw="$1"
            ;;
        -autogen)
            AUTOGEN="-autogen"
            ;;
        -twh)
            shift
            TOWHOM_PASSED="$1"
            TOWHOM_FAILED="$1"
            ;;
	*)
	    echo "Unknown option ($1)"
	    exit 1
	    ;;
    esac
    shift
done

# Mail addresses for reports
# TOWHOM_PASSED--normal report
# TOWHOM_FAILED--Failure Report
# If in debug mode, email output to myself; else to the "group".
# Host cobalt (co-login1) has a private list of addresses.
if [ -n "$DEBUGMODE" ]; then
    echo "******** DEBUGMODE is $DEBUGMODE ************"
#    TOWHOM_PASSED=hdftest
#    TOWHOM_FAILED=hdftest
    TOWHOM_PASSED=lrknox
    TOWHOM_FAILED=lrknox
#else
#	TOWHOM_PASSED="hdf5repo@lists.hdfgroup.org repo-all@lists.hdfgroup.org"
#	TOWHOM_FAILED=hdf5lib@lists.hdfgroup.org
#    TOWHOM_PASSED="lrknox@hdfgroup.org epourmal@hdfgroup.org byrn@hdfgroup.org koziol@hdfgroup.org mamcgree@hdfgroup.org acheng@hdfgroup.org"
#    TOWHOM_FAILED="lrknox@hdfgroup.org epourmal@hdfgroup.org byrn@hdfgroup.org koziol@hdfgroup.org mamcgree@hdfgroup.org acheng@hdfgroup.org"
 #   TOWHOM_PASSED="lrknox@hdfgroup.org koziol@hdfgroup.org"
 #   TOWHOM_FAILED="lrknox@hdfgroup.org koziol@hdfgroup.org"
#    TOWHOM_PASSED=lrknox
#    TOWHOM_FAILED=lrknox
fi

# Setup test directories
LOGDIR=$HOME/snapshots-${sw}${SWVERSTR}/log
LOGDIRLOCK=${LOGDIR}/.lock-${HOSTNAME}
LOGFILE=${LOGDIR}/${PROGRAMNAME}-${HOSTNAME}_${TODAY}
FAILEDLOG=${LOGDIR}/FAILED_LOG_${TODAY}
FAILEDDETAIL=${LOGDIR}/FAILED_DETAIL_${TODAY}
PASSEDLOG=${LOGDIR}/PASSED_LOG_${TODAY}
SKIPPEDLOG=${LOGDIR}/SKIPPED_LOG_${TODAY}
TIMELOG=${LOGDIR}/TIME_LOG_${TODAY}
TIMEKEEPERLOG=${LOGDIR}/TIMEKEEPER_LOG_${TODAY}
REPORTED=${LOGDIR}/REPORTED_${TODAY}
SNAPSHOTLOG=${LOGDIR}/SNAPSHOT_LOG_${TODAY}
RELEASE_ASAP=${LOGDIR}/../release_asap		# make a special release asap
RELEASE_ALWAYS=${LOGDIR}/../release_always	# always release
RELEASE_NOT=${LOGDIR}/../release_not		# Do not release
RELEASED=${LOGDIR}/RELEASED_${TODAY}
WATCHERFILE=${LOGDIR}/../watchers		# List of platform watchers
CMD="bin/runtest $DEBUGMODE ${SWVER}"

# Setup Mailing command and Report title
MAIL=mail
TEST_TITLE="$HOSTNAME ${SW}${SWVERSTR}_Daily_Tests_${TODAY}"

# set up auto-cleanup
trap "rm -f $LOGDIRLOCK" 0
trap "rm -f $LOGDIRLOCK" 1 2 3 4 5 6 7 8 9 10 12 13 14 15

# Clean up LOGDIR by moving all files that are not "of today" to OLD.
# Then go into OLD and move all files older than 7 days to OLDER.
# Then go into OLDer and remove all files older than 30 days.
# This procedure keeps old logfiles in two tiers.  The first tier is OLD
# which should be in AFS space so that the files are available to most hosts.
# The second tier is OLDER which could be in HDF's own NFS space which has
# much bigger capacity but not as widely available.
# Do all these in a sub-shell with -e to abort the cleaning if any error is
# encountered.
(set -e
nold=6
nolder=31
echo cleaning $LOGDIR by moving all old logfiles to OLD
cd $LOGDIR
test -d OLD/. || mkdir OLD
find . \( -name OLD -prune \) \
    -o -type f ! -name '*'$TODAY'*' -exec mv '{}' OLD/. \;

echo cleaning $LOGDIR/OLD by moving all files older than $nold days to OLDER
cd OLD
test -d OLDER/. || mkdir OLDER
find . \( -name OLDER -prune \) \
    -o -type f -mtime +$nold -exec mv '{}' OLDER/. \;

echo cleaning $LOGDIR/OLDER by removing all files older than $nolder days.
cd OLDER
find . -type f -mtime +$nolder -exec rm -f '{}' \;

if [ -f $LOGFILE ]; then
    if [ -n "$DEBUGMODE" ]; then
	echo "$LOGFILE exists.  No more daily tests today"
    fi
    exit 1
fi
)

# set up the lock file
# if one already exists, just show it and continues
if [ -f $LOGDIRLOCK ]; then
    echo "LOGDIRLOCK($LOGDIRLOCK) exists. Content is:"
    cat $LOGDIRLOCK
fi
date > $LOGDIRLOCK
echo PID@HOSTNAME=$$@$HOSTNAME >> $LOGDIRLOCK

#
if [ -n "$DEBUGMODE" ]; then
    echo "launching runsnap ..."
fi

# setup from which version of source to launch test
if [ -z "$SWVERSTR" ]; then
    SWSRC_VER=current
else
    SWSRC_VER=v$SWVERSTR
fi

(cd $HOME/snapshots-${sw}${SWVERSTR}; $CMD -all $AUTOGEN) > $LOGFILE 2>&1

# Verify test script did complete by checking the last lines
(tail -4 $LOGFILE | grep -s "^*** finished .* in $HOSTNAME ***" > /dev/null 2>&1) ||
    (echo "****snaptest launcher FAILED to complete in $HOSTNAME****" >> $FAILEDLOG)

CURRENT_DIR=`pwd`
if [ -n "$AUTOGEN" ]; then
    cd $HOME/snapshots-${sw}${SWVERSTR}/current_src
else
    cd $HOME/snapshots-${sw}${SWVERSTR}/current
fi

SVN_URL=`svn info | grep URL`
if [ -n "${SVN_URL}" ]; then
    BRANCHNAME=`echo $SVN_URL | sed -e 's/URL:.*\///' | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
    REVISION=`svn info | grep Revision`
    LAST_INFO=`svn info | grep "Last Changed"`
else
    BRANCHNAME=`git branch | grep "64bit_hid_t" | sed -e 's/\* //' | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
    REVISION=`git show | egrep 'commit '`
    LAST_INFO=`git show | egrep 'Author|Date'`
fi
if [ -z "${BRANCHNAME}" ]; then
    BRANCHNAME=${DEFAULTBRANCHNAME}
fi

TEST_TITLE="$HOSTNAME ${SW}_${BRANCHNAME}${SWVERSTR}_Daily_Tests_${TODAY}"
TITLE="${BRANCHNAME} Tests on $TODAY"
cd $CURRENT_DIR

# Check result
if [ -f $FAILEDLOG ]; then
    errcode=1
    REPORT_TITLE="${TEST_TITLE}_FAILED!!!"
    TOWHOM=$TOWHOM_FAILED
else
    REPORT_TITLE="${TEST_TITLE}"
    TOWHOM=$TOWHOM_PASSED
fi
    
# report result
# save FAILED or SUCCEESS in REPORTED and remove them
(
 echo "*** $TITLE ***"
 echo ""
 echo "$SVN_URL"
 echo "$REVISION"
# Remove the Last Changed entries from the email.  It was found to be somewhat confusing.  20150921 LK
#echo "$LAST_INFO"
 echo ""
 echo "============================="
 echo "   Tests Summary"
 echo "============================="
 if [ -f $FAILEDLOG ]; then
    sort $FAILEDLOG | tee -a $REPORTED
    echo ""
#    rm $FAILEDLOG
 fi
 if [ -f $SKIPPEDLOG ]; then
    sort $SKIPPEDLOG | tee -a $REPORTED
    echo ""
#    rm $SKIPPEDLOG
 fi
 if [ -f $PASSEDLOG ]; then
    sort $PASSEDLOG | tee -a $REPORTED
#    rm $PASSEDLOG
 fi
 echo ""
 echo "============================="
 echo "   Tests Time Summary"
 echo "============================="
 if [ -f $TIMELOG ]; then
    cat $TIMELOG | tee -a $REPORTED
#    rm $TIMELOG
 fi
 echo ""
 echo ""
 echo "============================="
 echo "   Timekeeper log"
 echo "============================="
 if [ -f $TIMEKEEPERLOG ]; then
    cat $TIMEKEEPERLOG | tee -a $REPORTED
#    rm $TIMEKEEPERLOG
 fi
 # If failures detected, show failed details, watchers list and test details.
 # Else just show test details file name.
 if [ -f $FAILEDDETAIL ]; then
    echo ""
    echo "============================="
    echo "   Tests Failures"
    echo "============================="
    cat $FAILEDDETAIL | tee -a $REPORTED
    rm $FAILEDDETAIL
    echo ""
    echo "============================="
    echo "   Watchers List"
    echo "============================="
    cat $WATCHERFILE
    echo ""
    echo "============================="
    echo "   Tests Details"
    echo "============================="
    cat $LOGFILE
 else
    if [ "$errcode" == "1" ]; then
       echo "============================="
       echo "   Watchers List"
       echo "============================="
       cat $WATCHERFILE
       echo ""
    fi
    echo "============================="
    echo "   Tests Details"
    echo "============================="
    echo "See $LOGFILE"
 fi
) | $MAIL -s "$REPORT_TITLE" $TOWHOM

# remove lock
rm -f $LOGDIRLOCK

# do a snapshot release if
#   test-passed && 
#   release_not-is-not-present &&
#   ( today-is-Sunday || release_asap-is-present || release_always-is-present)
# The difference between release_asap and release_always is that release_asap
# is a one time deal and needs to be set again if desire; while release_always
# stays in effect until removed.
if [ $errcode -eq 0 -a \
    ! -f $RELEASE_NOT -a \
    \( `date +%a` = Sun -o -f $RELEASE_ASAP -o -f $RELEASE_ALWAYS \) ]; then
    # do a snapshot.
    SWDIR=$HOME/snapshots-${sw}${SWVERSTR:-dev}/${sw}
    if [ -f $RELEASE_ASAP ]; then
	RELEASE_MESG="Special snapshot release launched for ${SW}${SWVERSTR}."
    elif [ -f $RELEASE_ALWAYS ]; then
	RELEASE_MESG="Snapshot release launched for ${SW}${SWVERSTR}."
    else
	RELEASE_MESG="Weekly snapshot release launched for ${SW}${SWVERSTR}."
    fi

    # Before doing the release, check if there are some daily tests in progress.
    # If so, wait for them to finish (up to 30 minutes).  Then proceed.
    wait_max=30
    lockfiles=`ls $LOGDIR/.lock-* 2>/dev/null`
    while [ -n "$lockfiles" -a $wait_max -gt 0 ] ; do
	echo $lockfiles exist.  Wait a minute.
	sleep 60
	wait_max=`expr $wait_max - 1`
	lockfiles=`ls $LOGDIR/.lock-* 2>/dev/null`
    done
    (
	cd $SWDIR
	bin/snapshot
    ) >> $SNAPSHOTLOG 2>&1
    errcode=$?

    # if snapshot went okay, remove release-asap-request
    if [ $errcode -eq 0 ]; then
	if [ -f $RELEASE_ASAP ]; then
	    mv $RELEASE_ASAP $RELEASED
	else
	    touch $RELEASED
	fi
	RELEASE_Result="Released"
	TOWHOM=$TOWHOM_PASSED
    else
	RELEASE_Result="FAILED"
	TOWHOM=$TOWHOM_FAILED
    fi

    # report snapshot result
    (
     echo $RELEASE_MESG
     echo "$RELEASE_Result with exit Error Code = ${errcode}."
     echo "Complete output is stored in"
     echo "    $SNAPSHOTLOG"
    ) |
    mail -s "${SW}${SWVERSTR}_snapshot:$RELEASE_Result" $TOWHOM
fi


# final exit
exit $errcode
